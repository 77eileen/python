# 부모 클래스가 메소드를 제공하는데, 내용이 없고 raise로 '개발되지 않음!' 오류가 나오도록 만듦(추상 개념)
# 상속 받은 자식 클래스가 해당 메소드를 사용하면, raise가 발생하니
# 메소드 이름만 가져오고 내용은 객체별로 다르게 채우도록 다형성을 생성하는 것.
## 그것이 '추상'이다.
from abc import ABC,abstractmethod
class Parents(ABC):
    def make_money(self):           #==> 추상 메서드
        raise NotImplementedError

    @abstractmethod # 반드시 save_money에 대한 내용을 자식이 무조건 가지고 있어야 함(추상화)
    # 안 그러면 객체 자체를 생성할 수 없게 만드는 강력한 강제 수단이다. (선택사항 아님)
    def save_money(self):
        pass

class Child(Parents):
    def make_money(self):  # 부모의 make_money를 재정의(override)
        print('장사')
    def save_money(self):
        print('투자')

c=Child()      # 부모의 추상메서드를 상속 받으면, 클래스에서 반드시 재정의 안할시 객체 생성 자체가 안 됨.
c.make_money() # 다형성     # 자식 클래스에서 재정의 안하면 예외가 발생하도록 설계
# 필요할 때 마다 재정의를 할 수 있는 장점이 존재.


#=================== gpt =========================================
# 추상 메소드는 껍데기만 있는 메소드
# "이름은 있는데, 내용은 없는 함수"라고 생각하면 돼.
# 부모 클래스에서 메소드 이름만 만들어 두고, 실제 동작(내용)은 자식 클래스가 채워 넣어야 함.

# 왜 이렇게 쓰냐?

# 부모 클래스가 "자식아, 이 기능은 꼭 만들어야 해!" 하고 강제하는 역할을 함.
# 그래서 자식 클래스가 이 메소드를 구현하지 않으면 객체 생성 자체가 불가능해짐. (바로 오류 발생)

# 예시로 보면
from abc import ABC, abstractmethod

class 부모(ABC):
    @abstractmethod
    def 저장(self):
        pass  # 내용 없음

class 자식(부모):
    def 저장(self):
        print("돈을 저축한다!")


# 부모가 저장이라는 추상 메소드를 만들었고,
# 자식은 그걸 반드시 "구현(내용 채우기)"해야만 객체를 만들 수 있음.
# 👉 핵심 키워드
# from abc import ABC, abstractmethod → 추상 클래스/메소드 기능을 쓰기 위한 기본 문법
# @abstractmethod → 이 메소드는 꼭 자식이 구현해야 한다는 표시
# 👉 요약 한 줄:
# 추상 메소드는 "자식이 반드시 구현해야 하는 설계도 같은 함수"다. 부모가 이름만 주고, 자식이 내용을 채우게 강제하는 것.



# 1. 추상메서드란?
# 정의: 구체적인 내용은 없지만, 자식 클래스에서 반드시 만들어야 하는 메서드
# 비유:
# 부모가 “이 기능은 꼭 있어야 해”라고 규칙만 알려주고
# 실제 실행 내용은 자식이 정하도록 맡기는 것

# 예시 비유:
# 부모 클래스: “자동차라면 달릴 수 있어야 해”라고 선언
# 자식 클래스: “스포츠카는 터보로 달릴 거야” / “트럭은 느리지만 짐 싣고 달릴 거야”
# 즉, 메서드의 이름과 구조만 부모가 알려주고, 실제 내용은 자식이 작성

# 2. 코드 예시
# from abc import ABC, abstractmethod

# # 추상 클래스
# class Animal(ABC):
#     @abstractmethod
#     def sound(self):
#         pass  # 내용은 없음, 자식이 반드시 구현해야 함

# # 자식 클래스
# class Dog(Animal):
#     def sound(self):
#         print("멍멍!")  # 실제 내용 구현

# class Cat(Animal):
#     def sound(self):
#         print("야옹!")  # 실제 내용 구현

# # 사용
# dog = Dog()
# dog.sound()  # 멍멍!

# cat = Cat()
# cat.sound()  # 야옹!


# Animal → 추상 클래스
# sound() → 추상메서드, 구현 안 됨
# Dog와 Cat → 자식 클래스에서 반드시 sound() 구현

# 💡 만약 자식 클래스에서 sound()를 구현하지 않으면
# 객체를 만들 때 오류가 나서 강제로 구현하도록 유도

# 3. 추상메서드의 목적
# 공통 규칙 강제
# 모든 자식 클래스가 반드시 구현해야 하는 기능을 지정
# 예: 자동차라면 달려야 한다, 동물이라면 소리를 낼 수 있어야 한다
# 코드 구조 통일
# 자식 클래스마다 메서드 이름, 구조가 일정
# 유지보수가 쉬워짐
# 객체 지향 설계 패턴에서 핵심
# 인터페이스처럼 “어떤 기능을 꼭 넣어야 한다”를 정의할 때 사용

# 💡 비유로 정리
# 추상메서드 = “규칙서”
# 자식 클래스 = “규칙서에 맞춰서 실제 행동 구현”
# 부모 클래스는 행동 내용은 없음, 이름과 존재만 정의